---
import "@/styles/keyframes.css";
import { Icon } from "astro-icon/components";
import Layout from "@/layouts/Layout.astro";
import Button from "@/components/Button.astro";
import Heading from "@/components/Heading.astro";
import InputText from "@/components/InputText.astro";
import InputRadio from "@/components/InputRadio.astro";

const meta = {
  title: "お問い合わせ",
  description:
    "仁戸名聖書バプテスト教会へのお問い合わせはこちらから。教会の場所や礼拝の時間、活動についてのご質問やご相談をお気軽にお寄せください。",
};
---

<Layout {...meta}>
  <div
    class="container"
    x-data="{ status: '' }"
    @done="status = 'done';"
    @error="status = 'error';"
  >
    <section
      class="block"
      data-scroll="theme-light"
      x-show="status === '' || status === 'submitting'"
    >
      <Heading en="Contact Us" ja="お問い合わせ" />

      <form class="form" @submit="status ='submitting'">
        <div class="item">
          <div class="title">お問い合わせ内容を選択ください</div>
          <InputRadio name="inquiry" value="教会の場所や駐車場について" checked>
            教会の場所や駐車場について
          </InputRadio>

          <InputRadio name="inquiry" value="礼拝の時間や内容について">
            礼拝の時間や内容について
          </InputRadio>

          <InputRadio name="inquiry" value="その他">その他</InputRadio>
        </div>

        <div class="item">
          <div class="title">ご希望の返信方法を選択ください</div>
          <InputRadio name="reply" value="メール" checked>メール</InputRadio>
          <InputRadio name="reply" value="電話">電話</InputRadio>
        </div>

        <div class="item">
          <div class="title">メールアドレス</div>
          <InputText type="email" name="email" maxlength="128" required />

          <div class="title">電話番号</div>
          <InputText type="tel" name="tel" maxlength="12" />

          <div class="title">お名前</div>
          <InputText type="text" name="name" maxlength="64" />
        </div>

        <div class="button">
          <Button type="submit" variant="contained">送信</Button>
        </div>

        <p class="recaptcha">
          This site is protected by reCAPTCHA and the Google
          <a class="link" href="https://policies.google.com/privacy">
            Privacy Policy
          </a>
          and
          <a class="link" href="https://policies.google.com/terms">
            Terms of Service
          </a>
          apply.
        </p>
      </form>
    </section>

    <section
      class="submitting"
      data-scroll="theme-light"
      x-show="status === 'submitting'"
      style="display: none;"
    >
      <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" class="svg">
        <path
          d="M3.5 1.3457C3.58425 1.3457 3.66714 1.36699 3.74096 1.4076L22.2034 11.562C22.4454 11.695 22.5337 11.9991 22.4006 12.241C22.3549 12.3241 22.2865 12.3925 22.2034 12.4382L3.74096 22.5925C3.499 22.7256 3.19497 22.6374 3.06189 22.3954C3.02129 22.3216 3 22.2387 3 22.1544V1.8457C3 1.56956 3.22386 1.3457 3.5 1.3457ZM5 4.38261V11.0001H10V13.0001H5V19.6175L18.8499 12.0001L5 4.38261Z"
        ></path>
      </svg>
    </section>

    <section
      class="block"
      data-scroll="theme-light"
      x-show="status === 'done'"
      style="display: none;"
    >
      <div class="box done">
        <h3 class="h3">
          <Icon name="line-md:confirm-circle" />
          <span>送信しました</span>
        </h3>
        <p>内容を確認次第、折り返しご連絡いたします。</p>
      </div>
    </section>

    <section
      class="block"
      data-scroll="theme-light"
      x-show="status === 'error'"
      style="display: none;"
    >
      <div class="box error">
        <h3 class="h3">
          <Icon name="line-md:alert-circle" />
          <span>送信に失敗しました</span>
        </h3>
        <p>恐れ入りますが、しばらく時間をおいて再度お試しください。</p>
      </div>
    </section>
  </div>
</Layout>

<style>
  .block {
    min-height: 100vh;
  }

  .form {
    font-size: 1rem;
    margin: 0 auto 25vh;
    max-width: 480px;
  }

  .item {
    margin: 0 0 3em;
  }

  .title {
    margin: 1em 0 0;
    padding: 0.25em;
  }

  .button {
    height: 4em;
  }

  .submitting {
    backdrop-filter: blur(3px);
    background: #ffffff80;
    inset: 0;
    padding: 40vh 0 0;
    position: fixed;
    text-align: center;
  }

  .svg {
    animation:
      crossing 2s ease-out infinite,
      blink 1s infinite;
    height: 24px;
    fill: currentColor;
  }

  .recaptcha {
    color: var(--color-subtext);
    font-size: small;
    letter-spacing: 0;
    line-height: 1.2;
    margin: 1em;
  }

  .link {
    text-decoration: underline;
  }

  .box {
    align-items: center;
    border: currentColor solid 2px;
    border-radius: 0.5em;
    display: flex;
    flex-direction: column;
    margin: 20vh auto;
    max-width: 480px;
    padding: 5vh 2em;
  }

  .h3 {
    align-items: center;
    display: flex;
    font-size: 125%;
    gap: 0.5em;
    justify-content: center;
    margin: 1em 0;
  }

  .done {
    color: var(--color-accent-complement);
  }

  .error {
    color: var(--color-accent);
  }

  [data-icon] {
    height: 2em;
    width: 2em;
  }
</style>

<script
  is:inline
  src="https://www.google.com/recaptcha/api.js?render=6LemGUgpAAAAAHNy3XuUPkWhP2KZXkp1EfmC5lDh"
></script>
<script src="https://unpkg.com/alpinejs@3.x.x/dist/cdn.min.js"></script>
<script>
  type PostResponse = {
    result: "done" | "error";
    error: string;
  };

  const ENDPOINT = import.meta.env.PUBLIC_ENDPOINT;
  const SITEKEY = import.meta.env.PUBLIC_SITEKEY;
  const form = document.querySelector(".form") as HTMLFormElement;
  const container = document.querySelector(".container") as HTMLDivElement;

  form.addEventListener("submit", async (event: Event) => {
    event.preventDefault();
    window.scrollTo(0, 0);

    grecaptcha.ready(async () => {
      const formData = new FormData(form);
      const postData = Object.fromEntries(formData.entries());

      postData.type = "000000";
      postData.recaptcha = await grecaptcha.execute(SITEKEY, {
        action: "submit",
      });

      const response = await fetch(ENDPOINT, {
        method: "POST",
        body: JSON.stringify(postData),
      });

      if (!response.ok) {
        throw new Error("Form submission failed");
      }

      const responseData: PostResponse = await response.json();

      setTimeout(() => {
        container.dispatchEvent(new CustomEvent(responseData.result));
      }, 100);
    });
  });
</script>
